import random
import math

def bogosort(lst):
    """
    Реализация алгоритма BogoSort (сортировки перестановками)
    Принцип работы:
    1. Получает на вход список
    2. Случайным образом перемешивает элементы
    3. Проверяет, отсортирован ли список
    4. Повторяет до тех пор, пока список не будет отсортирован
    5. Возвращает отсортированный список
    
    Внимание! Алгоритм имеет факториальную сложность O(n!),
    поэтому работает только для очень маленьких списков (n ≤ 5)
    """
    # Создаем копию списка, чтобы не изменять оригинал
    sorted_lst = list(lst)
    
    # Счетчик попыток (для демонстрации)
    attempts = 0
    
    # Пока список не отсортирован
    while not is_sorted(sorted_lst):
        random.shuffle(sorted_lst)  # Перемешиваем
        attempts += 1
        
        # Для демонстрации выводим прогресс (только для маленьких списков)
        if len(sorted_lst) <= 5 and attempts % 1000 == 0:
            print(f"Попытка {attempts}: {sorted_lst}")
    
    # Выводим общее число попыток
    print(f"Сортировка заняла {attempts} попыток")
    return sorted_lst

def is_sorted(lst):
    """Проверяет, отсортирован ли список по возрастанию"""
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))

# Демонстрация работы
if __name__ == "__main__":
    print("Демонстрация BogoSort")
    print("=" * 40)
    
    # Тестовый список (не делайте больше 5 элементов!)
    test_list = [3, 1, 2]
    
    print("Исходный список:", test_list)
    print("Начинаем сортировку...")
    
    sorted_list = bogosort(test_list)
    print("Отсортированный список:", sorted_list)
    
    # Расчет теоретического среднего числа попыток
    n = len(test_list)
    avg_attempts = math.factorial(n)
    print(f"\nТеоретическое среднее число попыток для {n} элементов: {avg_attempts}")



Демонстрация BogoSort
========================================
Исходный список: [3, 1, 2]
Начинаем сортировку...
Попытка 1000: [2, 3, 1]
Попытка 2000: [1, 3, 2]
Сортировка заняла 2161 попыток
Отсортированный список: [1, 2, 3]

Теоретическое среднее число попыток для 3 элементов: 6
